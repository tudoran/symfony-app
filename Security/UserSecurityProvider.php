<?php namespace BackOfficeBundle\Security;

use Doctrine\ORM\EntityManager;
use Doctrine\ORM\Query;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\Security\Core\Authentication\Token\TokenInterface;
use Symfony\Component\Security\Core\Authentication\Token\UsernamePasswordToken;
use Symfony\Component\Security\Core\Exception\UsernameNotFoundException;
use Symfony\Component\Security\Core\User\UserInterface;
use Symfony\Component\Security\Core\User\UserProviderInterface;

class UserSecurityProvider implements UserProviderInterface
{

    private $entityManager;
    private $classOrAlias;
    private $class;

    public function __construct(EntityManager $entityManager)
    {


        $this->entityManager = $entityManager;
    }

    /**
     * {@inheritdoc}
     */
    public function loadUserByUsername($username)
    {

        $request = Request::createFromGlobals();

        $user = $this->entityManager->getRepository('BackOfficeBundle:User')->findOneBy(['email' => $request->get('_email'), 'active' => 1]);

        if (null === $user) {
            throw new UsernameNotFoundException(sprintf('User "%s" not found.', $username));
        }

        return $user;
    }

    /**
     * {@inheritdoc}
     */
    public function refreshUser(UserInterface $user)
    {

        if (null === $user) {
            throw new UsernameNotFoundException(sprintf('User "%s" not found.', $user));
        }

        return $user;
    }


    public function supportsClass($class)
    {
        return $class === $this->getClass();
    }

    private function getClass()
    {
        if (null === $this->class) {
            $class = $this->classOrAlias;

            if (false !== strpos($class, ':')) {
                $class = $this->getClassMetadata()->getName();
            }

            $this->class = $class;
        }

        return $this->class;
    }

    private function getClassMetadata()
    {
        return null;
    }

    protected function retrieveUser($username, UsernamePasswordToken $token)
    {
        return $token;
    }

    protected function checkAuthentication(UserInterface $user, UsernamePasswordToken $token)
    {
        // TODO: Change the autogenerated stub
    }

    public function authenticate(TokenInterface $token)
    {
        $username = $token->getUsername();

        $authenticatedToken = new UsernamePasswordToken($token, $token->getCredentials(), 'main', $token->getRoles());
        $authenticatedToken->setAttributes($token->getAttributes());

        return $authenticatedToken;
    }

    public function supports(TokenInterface $token)
    {
        // TODO: Change the autogenerated stub
    }


}